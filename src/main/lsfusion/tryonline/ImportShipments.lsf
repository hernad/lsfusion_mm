// # header
MODULE ImportShipments;

REQUIRE Shipment;
// # header end
// to import primitive data for which you need to find objects in the system
inn = DATA LOCAL BPSTRING [9] (Shipment);
barcode = DATA LOCAL BPSTRING [13] (ShipmentDetail);

FORM shipments
    OBJECTS s = Shipment EXTID 'shipments' // use EXTID to keep the short name of the object s, but when exported, shipments will be considered its name
    PROPERTIES (s) number, date, inn
    OBJECTS sd = ShipmentDetail EXTID 'detail' // use EXTID to keep the short name of the sd object, but when exported, its name will be considered as detail
    FILTERS shipment (sd) = s // automatically fill shipment for detail
    PROPERTIES (sd) barcode, price, quantity
;

run () {
    FOR jsonFile = JSONFILE ('\ {shipments: [' + // jsonFile must / can be passed in the run parameter, {} must be escaped because curly braces are used in internationalization
                '\ {number: "13423", date: "01.01.2019", inn: "2", detail: [\ {barcode: "141", quantity: 5, price: 10 \}, \ {barcode: "545 ", quantity: 2, price: 11 \}] \}, '+
                '\ {number: "12445", date: "02/01/2019", inn: "1", detail: [\ {barcode: "13", quantity: 1, price: 22 \}] \}] \}' )
                 DO {
        IMPORT shipments FROM jsonFile; // import type is automatically determined from the file type
        FOR BPSTRING [9] inn = inn (Shipment s) DO {// for all accepted inn
            customer (s) <- legalEntityINN (inn); // write the client into the delivery with the accepted INN
            stock (s) <- GROUP MAX st AS Stock; // write some warehouse (with maximum id)
        }
        FOR barcode (Item item) = barcode (ShipmentDetail sd) DO // another way to associate primitive data with object data
            item (sd) <- item;
            
        APPLY;
        exportString () <- IF canceled () THEN applyMessage () ELSE 'Invoice recorded successfully';
   }
}
